{"version":3,"sources":["WebSocketProxy.tsx","SettingDialog.tsx","TimeoutFullScreen.tsx","App.tsx","serviceWorker.js","index.js"],"names":["GameStateType","MessageType","KEEP_ALIVE","ms","NodeMessage","_ref","channel","type","clientId","Object","classCallCheck","this","unknown","JSON","stringify","toObject","GameContextMessage","context","_this","possibleConstructorReturn","getPrototypeOf","call","gameStateChange","state","ready","clients","currentClientId","thinkTimeOut","delayTimeOut","org","get","prototype","objectSpread","TurnToMessage","_this2","turnTo","turnToClientId","GameStateManager","_ref2","getMeta","Error","clientName","_","find","client","id","push","name","foundClient","pull","toString","end","pause","play","_ref3","length","index","map","indexOf","clientLength","nextClientId","e","console","error","MessageFactory","_ref4","MessageDispatcher","_ref5","topic","data","message","object","parse","emit","EventEmitter","WebSocketProxy","props","_this3","undefined","gameStateManager","messageFactory","messageDispatcher","connected","onChangeConnected","_this4","close","dispatcher","mqtt","connect","keepalive","on","subscribe","err","onConnected","next","newState","loadCurrentState","log","getHost","concat","join","onChangeThinkTimeOut","onChangeDelayTimeOut","onChangeClients","onChangeGameState","onTurnTo","msg","onTurnYou","joinClient","publish","qos","retain","exitClient","changeToPlay","info","getTurnInfo","getStateMessage","changeToPause","changeToEnd","_ref6","changeTimeout","changeToReady","react_default","a","createElement","className","children","Component","Transition","Slide_default","assign","direction","AlertDialogSlide","handleClose","onClose","Dialog_default","open","TransitionComponent","keepMounted","aria-labelledby","aria-describedby","DialogTitle_default","DialogContent_default","DialogActions_default","Button_default","onClick","color","React","FullScreenDialog","_this$props","classes","_this$props$title","title","fullScreen","AppBar_default","appBar","Toolbar_default","IconButton_default","aria-label","Close_default","Typography_default","variant","flex","withStyles","position","__convertVisibleMS","value","contentString","swalOptions","content","element","attributes","swal","__showSnackbar","stack","_saveClientFromStorage","sessionStorage","setItem","_loadClientFromStorage","getItem","defaultId","Math","random","substr","App","gameState","settingDialog","turnTimeoutDialog","wsProxy","createRef","audioComponent","handelChangeClient","bind","assertThisInitialized","renderClients","handelTurnTo","handleTurnYou","handleCloseTurnTimeoutDialog","setState","speechText","current","q","encodeURIComponent","src","setAttribute","load","timeout","arguments","turnMeText","playTTS","setTimeout","handleOpenTurnTimeoutDialog","Items","forEach","ListItem_default","key","dense","ListItemText_default","primary","classname","App-highlight","ListItemSecondaryAction_default","exit","Delete_default","List_default","renderGameState","grow","Settings_default","Grid_default","container","spacing","item","xs","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","heading","Wifi_default","WifiOff_default","ExpansionPanelDetails_default","lg","TextField_default","label","defaultValue","textField","margin","onChange","event","target","button","fullWidth","src_WebSocketProxy","ref","SettingDialog","onSave","helperText","TimeoutFullScreen","bigButton","theme","root","flexGrow","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","marginLeft","unit","marginRight","width","height","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","then","registration","unregister"],"mappings":"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","file":"static/js/main.e33ded65.chunk.js","sourcesContent":["import mqtt from 'mqtt';\nimport React, { Component } from 'react';\nimport {object} from \"prop-types\";\nimport EventEmitter from 'eventemitter3'\nimport _ from 'lodash';\nimport ms from 'ms';\n\nconst KEEP_ALIVE = ms('5h') / 1000; // sec\n\nexport enum GameStateType {\n    ready = 'GameStateTypeReady',\n    play = 'GameStateTypePlay',\n    pause = 'GameStateTypePause',\n    end = 'GameStateTypeEnd',\n}\n\nexport enum MessageType {\n    unknown = 'unknown',\n    turnTo = 'turnTo',\n    gameStateChange = 'gameStateChange',\n}\n\nexport interface MqttClientMeta {\n    id: string,\n    name: string,\n}\n\ninterface TurnInfo {\n    currentClientId: string,\n    nextClientId: string,\n}\n\ninterface MessageMeta {\n    clientId: string,\n    channel: string,\n}\n\nclass NodeMessage {\n    channel = '';\n    type?: MessageType = MessageType.unknown;\n    readonly clientId: string;\n    constructor({channel, type, clientId}: {channel: string, type?: MessageType, clientId: string}) {\n        this.channel = channel;\n        this.clientId = clientId;\n        if(this.type) {\n            this.type = type;\n        }\n    }\n    toObject() : object {\n        return {\n            type: this.type,\n            channel: this.channel,\n            clientId: this.clientId,\n        };\n    }\n    toString() : string {\n        return JSON.stringify(this.toObject());\n    }\n}\n\nclass GameContextMessage extends NodeMessage {\n    type = MessageType.gameStateChange;\n    state = GameStateType.ready;\n    clients: Array<MqttClientMeta> = [];\n    currentClientId: string = '';\n    thinkTimeOut: number = ms('5s');\n    delayTimeOut: number = ms('2s');\n\n    constructor(context: any) {\n        super(context);\n        if(context && context.state) {\n            this.state = context.state;\n        }\n\n        if(context && context.clients) {\n            this.clients = context.clients;\n        }\n\n        if(context && context.currentClientId) {\n            this.currentClientId = context.currentClientId;\n        }\n\n        if(context && context.thinkTimeOut) {\n            this.thinkTimeOut = context.thinkTimeOut;\n        }\n\n        if(context && context.delayTimeOut) {\n            this.delayTimeOut = context.delayTimeOut;\n        }\n    }\n    toObject() {\n        const org = super.toObject();\n        return {\n            ...org,\n            state: this.state,\n            clients: this.clients,\n            currentClientId: this.currentClientId,\n            thinkTimeOut: this.thinkTimeOut,\n            delayTimeOut: this.delayTimeOut,\n        };\n    }\n    getHost() {\n        return this.clientId;\n    }\n}\n\nclass TurnToMessage extends NodeMessage {\n    type = MessageType.turnTo;\n    turnToClientId: string = '';\n    constructor(context: any) {\n        super(context);\n        if(context.turnToClientId) {\n            this.turnToClientId = context.turnToClientId;\n        }\n    }\n    toObject() {\n        const org = super.toObject();\n        return {...org, turnToClientId: this.turnToClientId};\n    }\n}\n\nclass GameStateManager {\n    channel = '';\n    clientId = '';\n    context: GameContextMessage = new GameContextMessage(this.getMeta());\n\n    constructor({channel, clientId} : MessageMeta) {\n        this.channel = channel;\n        this.clientId = clientId;\n\n        this.context =  new GameContextMessage(this.getMeta());\n    }\n\n    private getMeta(): MessageMeta {\n        return {\n            channel: this.channel,\n            clientId: this.clientId,\n        };\n    }\n\n    loadCurrentState(state: GameContextMessage) {\n        if(!(state instanceof GameContextMessage)) {\n            throw new Error('can not load current state');\n        }\n        this.context = state;\n        return this.context;\n    }\n    joinClient(clientId: string, clientName: string) {\n        const foundClient = _.find<MqttClientMeta>(this.context.clients, (client) => client.id === clientId);\n        if(!foundClient) {\n            this.context.clients.push({\n                id: clientId,\n                name: clientName,\n            });\n        }\n        return this.context;\n    }\n    exitClient(clientId: string) {\n        const foundClient = _.find<MqttClientMeta>(this.context.clients, (client) => client.id === clientId);\n        if(foundClient) {\n            _.pull(this.context.clients, foundClient);\n        }\n        return this.context;\n    }\n\n    getStateMessage(): string {\n        return this.context.toString();\n    }\n    changeToReady() {\n        this.context.state = GameStateType.ready;\n        return this.context;\n    }\n    changeToEnd() {\n        this.context.state = GameStateType.end;\n        return this.context;\n    }\n    changeToPause() {\n        this.context.state = GameStateType.pause;\n        return this.context;\n    }\n    changeToPlay() {\n        this.context.state = GameStateType.play;\n        return this.context;\n    }\n    changeTimeout({thinkTimeOut, delayTimeOut} : {thinkTimeOut: number, delayTimeOut: number}) {\n        this.context.thinkTimeOut = thinkTimeOut;\n        this.context.delayTimeOut = delayTimeOut;\n        return this.context;\n    }\n    getTurnInfo(): TurnInfo | undefined {\n        if(this.context.clients.length === 0) {\n            const e =  new Error('At least one client');\n            console.error(e);\n            return;\n        }\n\n        const currentClientId = this.context.currentClientId;\n\n        let index = this.context.clients.map(client => client.id).indexOf(currentClientId);\n        index = (index === -1) ? 0 : index;\n\n        const clientLength = this.context.clients.length;\n\n        return {\n            currentClientId: this.context.clients[index].id,\n            nextClientId: this.context.clients[(index + 1) % clientLength].id,\n        }\n    }\n}\n\nclass MessageFactory {\n    channel = '';\n    clientId = '';\n    constructor({channel, clientId} : MessageMeta) {\n        this.channel = channel;\n        this.clientId = clientId;\n    }\n\n    private getMeta(): MessageMeta {\n        return {\n            channel: this.channel,\n            clientId: this.clientId,\n        };\n    }\n    turnTo(clientId: string): string {\n        const msg = new TurnToMessage({...this.getMeta(), turnToClientId: clientId});\n        return msg.toString();\n    }\n}\n\nclass MessageDispatcher extends EventEmitter {\n    next({topic, message}: {topic: string, message: any}) {\n        let data;\n        if( message instanceof object) {\n            data = message\n        } else {\n            data = JSON.parse(message.toString());\n        }\n\n        if(!data.type) {\n            this.emit('error', new Error('can not find message type'));\n            return;\n        }\n\n        const type = data.type;\n        this.emit('message', data);\n        this.emit(type, data);\n    }\n}\n\ninterface IWebSocketProxyProps {\n    onChangeClients?: (clients: Array<MqttClientMeta>) => void,\n    onChangeGameState?: (clients: GameStateType) => void,\n    onChangeThinkTimeOut?: (timeout: number) => void,\n    onChangeDelayTimeOut?: (timeout: number) => void,\n    onTurnYou?: () => void,\n    onTurnTo?: (clientId: string) => void,\n    onConnected?: (mqttClient: mqtt.MqttClient) => void,\n    onChangeConnected?: (connected: boolean) => void,\n    clientId: string,\n}\n\ninterface IWebSocketProxyState {\n}\n\nclass WebSocketProxy extends Component<IWebSocketProxyProps, IWebSocketProxyState> {\n    client?: mqtt.MqttClient = undefined;\n    gameStateManager?: GameStateManager = undefined;\n    messageFactory?: MessageFactory = undefined;\n    messageDispatcher?: MessageDispatcher = undefined;\n    channel: string = 'testchannel';\n\n    constructor(props: any) {\n        super(props);\n    }\n\n    close() {\n        if(this.client) {\n            if(this.client.connected) {\n                this.client.end();\n            }\n            if(this.props.onChangeConnected) {\n                this.props.onChangeConnected(false);\n            }\n        }\n        this.client = undefined;\n    }\n\n    open(channel: string) {\n        this.close();\n\n        this.channel = channel;\n\n        const clientId = this.props.clientId;\n\n        const gameStateManager = new GameStateManager({channel, clientId});\n        const messageFactory = new MessageFactory({channel, clientId});\n        const dispatcher = new MessageDispatcher();\n\n        // Mqtt connection\n        const client = mqtt.connect('wss://aud.ssp.hinet.net:443/mqtt', {keepalive: KEEP_ALIVE, clientId});\n        client.on('connect',  () => {\n            client.subscribe(channel, (err) => {\n                if (err) {\n                    console.error(err);\n                }\n            });\n            if(this.props.onConnected) {\n                this.props.onConnected(client);\n            }\n            if(this.props.onChangeConnected) {\n                this.props.onChangeConnected(client.connected);\n            }\n        });\n        client.on('message', function (topic, message) {\n            dispatcher.next({topic, message});\n            // console.log(`topic = ${topic}, message = ${message}`)\n        });\n\n\n        // Event handler\n        dispatcher.on(MessageType.gameStateChange, (data) => {\n            // init game state\n            const newState = new GameContextMessage(data);\n\n            gameStateManager.loadCurrentState(newState);\n            console.log('==============================');\n            console.log('Channel by : ' + gameStateManager.context.channel);\n            console.log('thinkTimeOut : ' + ms(gameStateManager.context.thinkTimeOut));\n            console.log('delayTimeOut : ' + ms(gameStateManager.context.delayTimeOut));\n            console.log('Host by : ' + gameStateManager.context.getHost());\n            console.log('Game state : ' + gameStateManager.context.state);\n            console.log('Current : ' + gameStateManager.context.currentClientId);\n            console.log('Clients : \\n' + gameStateManager.context.clients.map(client => `${client.id} - ${client.name}`).join('\\n'));\n            console.log('==============================');\n\n            if(this.props.onChangeThinkTimeOut) {\n                this.props.onChangeThinkTimeOut(gameStateManager.context.thinkTimeOut);\n            }\n            if(this.props.onChangeDelayTimeOut) {\n                this.props.onChangeDelayTimeOut(gameStateManager.context.delayTimeOut);\n            }\n            if(this.props.onChangeClients) {\n                this.props.onChangeClients(gameStateManager.context.clients);\n            }\n            if(this.props.onChangeGameState) {\n                this.props.onChangeGameState(gameStateManager.context.state);\n            }\n            if(this.props.onTurnTo) {\n                this.props.onTurnTo(gameStateManager.context.currentClientId);\n            }\n\n            // dispatch game state\n            if(gameStateManager.context.state === GameStateType.play) {\n                dispatcher.emit(GameStateType.play);\n            }\n            if(gameStateManager.context.state === GameStateType.ready) {\n                dispatcher.emit(GameStateType.ready);\n            }\n            if(gameStateManager.context.state === GameStateType.pause) {\n                dispatcher.emit(GameStateType.pause);\n            }\n            if(gameStateManager.context.state === GameStateType.end) {\n                dispatcher.emit(GameStateType.end);\n            }\n        });\n\n        dispatcher.on(MessageType.turnTo, (data) => {\n            const msg = new TurnToMessage(data);\n            if(this.props.onTurnTo) {\n                this.props.onTurnTo(msg.turnToClientId);\n            }\n\n            if(this.props.clientId === msg.turnToClientId) {\n                // console.log('turn to ==> ' + this.props.clientId);\n                if(this.props.onTurnYou) {\n                    this.props.onTurnYou();\n                }\n            }\n        });\n\n        // helper\n        this.client = client;\n        this.gameStateManager = gameStateManager;\n        this.messageFactory = messageFactory;\n        this.messageDispatcher = dispatcher;\n    }\n\n    join(clientId: string, clientName: string) {\n        if(this.gameStateManager && this.gameStateManager.context.state !== GameStateType.ready) {\n            console.error(new Error('Only join client for \"ready\" state'));\n            return;\n        }\n\n        if(this.client && this.gameStateManager) {\n            const state = this.gameStateManager.joinClient(clientId, clientName);\n            this.client.publish(this.channel, state.toString(), {qos:2, retain: true});\n        }\n    }\n\n    exit(clientId: string) {\n        if(this.client && this.gameStateManager) {\n            const state = this.gameStateManager.exitClient(clientId);\n            this.client.publish(this.channel, state.toString(), {qos:2, retain: true});\n        }\n    }\n\n    play() {\n        if(this.client && this.gameStateManager && this.messageFactory) {\n            const context = this.gameStateManager.changeToPlay();\n            this.client.publish(this.channel, this.messageFactory.turnTo(context.currentClientId), {qos:2});\n            this.client.publish(this.channel, context.toString(), {qos:2, retain: true})\n        }\n    }\n\n    next() {\n        if(this.client && this.gameStateManager) {\n            const context = this.gameStateManager.context;\n            const info = this.gameStateManager.getTurnInfo();\n\n\n            if(this.messageFactory && info && context.currentClientId === '') { // First\n                context.currentClientId = info ? info.currentClientId : '';\n                this.client.publish(this.channel, this.messageFactory.turnTo(context.currentClientId), {qos:2});\n            }else if(this.messageFactory && info &&  context.currentClientId !== info.nextClientId) { // in playing\n                context.currentClientId = info ? info.nextClientId : '';\n                this.client.publish(this.channel, this.messageFactory.turnTo(context.currentClientId), {qos:2});\n            }\n\n            // Change game context\n            this.client.publish(this.channel, this.gameStateManager.getStateMessage(), {qos:2, retain: true});\n        }\n    }\n\n    pause() {\n        if(this.client && this.gameStateManager) {\n            this.gameStateManager.changeToPause();\n            this.client.publish(this.channel, this.gameStateManager.getStateMessage(), {qos:2, retain: true})\n        }\n    }\n\n    end() {\n        if(this.client && this.gameStateManager) {\n            const context = this.gameStateManager.changeToEnd();\n            context.currentClientId = '';\n            this.client.publish(this.channel, this.gameStateManager.getStateMessage(), {qos:2, retain: true})\n        }\n    }\n\n    changeTimeout({thinkTimeOut, delayTimeOut} : {thinkTimeOut: number, delayTimeOut: number}) {\n        if(this.client && this.gameStateManager) {\n            const context = this.gameStateManager.changeTimeout({thinkTimeOut, delayTimeOut});\n            this.client.publish(this.channel, context.toString(), {qos:2, retain: true})\n        }\n    }\n\n    ready() {\n        if(this.client && this.gameStateManager) {\n            const context = this.gameStateManager.changeToReady();\n            context.currentClientId = '';\n            this.client.publish(this.channel, this.gameStateManager.getStateMessage(), {qos:2, retain: true})\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"websocket-proxy\">\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default WebSocketProxy;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\nfunction Transition(props: any) {\n    return <Slide direction=\"up\" {...props} />;\n}\n\n\ninterface IAlertDialogSlide {\n    // classes: any,\n    open: boolean,\n    onClose?: () => void,\n    onSave?: () => void,\n}\n\n\nclass AlertDialogSlide extends React.Component<IAlertDialogSlide> {\n    handleClose = () => {\n        if(this.props.onClose) {\n            this.props.onClose();\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <Dialog\n                    open={this.props.open}\n                    TransitionComponent={Transition}\n                    keepMounted\n                    onClose={this.handleClose}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\"\n                >\n                    <DialogTitle id=\"alert-dialog-slide-title\">\n                        {\"設定\"}\n                    </DialogTitle>\n                    <DialogContent>\n                        {this.props.children}\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            取消\n                        </Button>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            儲存\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default AlertDialogSlide;\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\n\nconst styles: any = {\n    appBar: {\n        position: 'relative',\n    },\n    flex: {\n        flex: 1,\n    },\n};\n\nfunction Transition(props: any) {\n    return <Slide direction=\"up\" {...props} />;\n}\n\ninterface IFullScreenDialogProps {\n    classes: any,\n    open: boolean,\n    title?: string\n    onClose?: () => void,\n}\n\nclass FullScreenDialog extends React.Component<IFullScreenDialogProps> {\n    handleClose = () => {\n        if(this.props.onClose) {\n            this.props.onClose();\n        }\n    };\n\n    render() {\n        const { classes, title = '' } = this.props;\n        return (\n            <div>\n                <Dialog\n                    fullScreen\n                    open={this.props.open}\n                    onClose={this.handleClose}\n                    TransitionComponent={Transition}\n                >\n                    <AppBar className={classes.appBar}>\n                        <Toolbar>\n                            <IconButton color=\"inherit\" onClick={this.handleClose} aria-label=\"Close\">\n                                <CloseIcon />\n                            </IconButton>\n                            <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\n                                {title}\n                            </Typography>\n                        </Toolbar>\n                    </AppBar>\n                    {this.props.children}\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(FullScreenDialog);\n","import React, {Component} from 'react';\nimport classname from 'classnames';\nimport { withStyles } from '@material-ui/core/styles';\nimport ms from 'ms';\nimport swal from 'sweetalert';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport NetworkOnIcon from '@material-ui/icons/Wifi';\nimport NetworkOffIcon from '@material-ui/icons/WifiOff';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport TextField from '@material-ui/core/TextField';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport './App.css';\nimport WebSocketProxy, {GameStateType, MqttClientMeta} from './WebSocketProxy';\nimport SettingDialog from './SettingDialog';\nimport TimeoutFullScreen from './TimeoutFullScreen';\n\nfunction __showSnackbar(title: string, contentString: string) {\n    const contentOptions = {\n        element: 'textarea',\n        attributes: {\n            value: contentString,\n        },\n    };\n    const swalOptions = {\n        title,\n        // icon: 'info',\n        content: contentOptions,\n        // buttons: [],\n        // timer: 3000,\n    };\n    swal(swalOptions);\n}\n\nfunction __convertVisibleMS(value: any) {\n    try {\n        return ms(value);\n    } catch (e) {\n        console.error(e);\n        __showSnackbar(e.message, e.stack);\n    }\n    return '';\n}\n\nfunction _saveClientFromStorage(client: MqttClientMeta) {\n    sessionStorage.setItem('clientId', client.id);\n    sessionStorage.setItem('clientName', client.name);\n}\n\nfunction _loadClientFromStorage(): MqttClientMeta {\n    const clientId = sessionStorage.getItem('clientId');\n    const clientName = sessionStorage.getItem('clientName');\n    const defaultId = 'you-turn_' + Math.random().toString(16).substr(2, 8);\n    const client =  {\n        id: clientId || defaultId,\n        name: clientName || defaultId,\n    };\n    _saveClientFromStorage(client);\n    return client;\n}\n\nconst styles = (theme: any) => ({\n    root: {\n        flexGrow: 1,\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightRegular,\n    },\n    textField: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n    },\n    button: {\n        margin: theme.spacing.unit,\n    },\n    bigButton: {\n        margin: theme.spacing.unit,\n        width: \"100%\",\n        height: \"45%\",\n    }\n});\n\ninterface IAppProps {\n    classes: any,\n}\n\ninterface IAppState {\n    clients: Array<MqttClientMeta>,\n    clientName: string,\n    clientId: string,\n    channel: string,\n    gameState: GameStateType,\n    currentClientId: string,\n    connected: boolean,\n    thinkTimeOut: number,\n    delayTimeOut: number,\n    settingDialog: boolean,\n    turnTimeoutDialog: boolean,\n}\n\nclass App extends Component<IAppProps, IAppState> {\n    wsProxy: React.RefObject<WebSocketProxy>;\n    audioComponent: React.RefObject<HTMLAudioElement>;\n    state = {\n        clients: [],\n        clientId: _loadClientFromStorage().id,\n        clientName: _loadClientFromStorage().name,\n        channel: 'testchannel',\n        gameState: GameStateType.end,\n        currentClientId: '',\n        connected: false,\n        thinkTimeOut: 0,\n        delayTimeOut: 0,\n        settingDialog: false,\n        turnTimeoutDialog: false,\n    };\n\n    constructor(props: any) {\n        super(props);\n        this.wsProxy = React.createRef();\n        this.audioComponent = React.createRef();\n        this.handelChangeClient = this.handelChangeClient.bind(this);\n        this.renderClients = this.renderClients.bind(this);\n        this.handelTurnTo = this.handelTurnTo.bind(this);\n        this.handleTurnYou = this.handleTurnYou.bind(this);\n        this.handleCloseTurnTimeoutDialog = this.handleCloseTurnTimeoutDialog.bind(this);\n    }\n\n    componentDidMount() {\n        // if(this.wsProxy.current) {\n        //     this.wsProxy.current.open(this.state.channel);\n        // }\n    }\n\n    handelChangeClient(clients: Array<MqttClientMeta>) {\n        this.setState(() => ({clients}));\n    }\n\n    handelTurnTo(clientId: string) {\n        this.setState(() => ({currentClientId: clientId}));\n    }\n\n    handleCloseTurnTimeoutDialog() {\n        this.setState(() => ({turnTimeoutDialog: false}));\n    }\n    handleOpenTurnTimeoutDialog() {\n        this.setState(() => ({turnTimeoutDialog: true}));\n    }\n\n    playTTS(speechText: string) {\n        //\n        if(this.audioComponent.current) {\n            const q = encodeURIComponent(speechText);\n            // const src = 'http://translate.google.com/translate_tts?ie=UTF-8&total=1&idx=0&textlen=32&client=tw-ob&tl=en-gb&q=' + q;\n            // const src = 'http://translate.google.com/translate_tts?ie=UTF-8&total=1&idx=0&client=tw-ob&tl=zh-tw&q=' + q;\n            const src = `https://google-translate-proxy.herokuapp.com/api/tts?query=${q}&language=zh-TW&speed=0.5`;\n            this.audioComponent.current.setAttribute('src',  src);\n            this.audioComponent.current.load();\n            this.audioComponent.current.play();\n        }\n    }\n\n    handleTurnYou(timeout = this.state.thinkTimeOut) {\n        if(this.state.gameState !== GameStateType.play) {\n            return;\n        }\n\n        const clientName = this.state.clientName;\n\n        // Show: turn me\n        console.log('Turn me: ' + clientName);\n        const turnMeText = clientName + \" 換你了\";\n        this.playTTS(turnMeText);\n\n        // Show: timeout\n        const timer = setTimeout(() => {\n            const speechText = clientName + \" 時間到了\";\n            this.playTTS(speechText);\n\n            this.handleOpenTurnTimeoutDialog();\n\n            // // dialog\n            // swal(speechText, {\n            //     buttons: {\n            //         delay: {\n            //             text: \"再一下\",\n            //             value: \"delay\",\n            //         },\n            //         next: {\n            //             text: \"下一位\",\n            //             value: \"next\",\n            //         },\n            //     },\n            // })\n            //     .then((value) => {\n            //         switch (value) {\n            //             case \"next\": {\n            //                 if(this.wsProxy.current) {\n            //                     this.wsProxy.current.next();\n            //                 }\n            //                 break;\n            //             }\n            //             case \"delay\": {\n            //                 this.handleTurnYou(this.state.delayTimeOut);\n            //                 break;\n            //             }\n            //         }\n            //     });\n        }, timeout);\n    }\n\n    renderClients(clients: Array<MqttClientMeta>) {\n        const Items: any[] = [];\n        clients.forEach(client => {\n            Items.push((\n                <ListItem key={client.id} dense>\n                    <ListItemText primary={<span className={classname({'App-highlight': (client.id === this.state.currentClientId)})}>{client.name}</span>} />\n                    <ListItemSecondaryAction>\n                        <IconButton onClick={() => {\n                            this.wsProxy.current && this.wsProxy.current.exit(client.id);\n                        }}>\n                            <DeleteIcon />\n                        </IconButton>\n                    </ListItemSecondaryAction>\n                </ListItem>));\n        });\n\n        return (\n            <List>\n                {Items}\n            </List>\n        );\n    }\n\n    renderGameState(state: GameStateType) {\n        if(state === GameStateType.play) {\n            return \"Play\";\n        }\n        if(state === GameStateType.ready) {\n            return \"Ready\";\n        }\n        if(state === GameStateType.end) {\n            return \"End\";\n        }\n        if(state === GameStateType.pause) {\n            return \"Pause\";\n        }\n        return \"End\";\n    }\n\n    render() {\n        const {classes} = this.props;\n        return (\n            <div className=\"App\">\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        {this.renderGameState(this.state.gameState)}\n                        <Typography variant=\"title\" color=\"inherit\" className={classes.grow}>\n                            {this.state.clientName}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"inherit\" className={classes.grow}>\n                            {this.state.clientId}\n                        </Typography>\n                        {this.state.connected && <IconButton color=\"inherit\" onClick={()=>{\n                            this.setState(() => ({settingDialog: true}));\n                        }}><SettingsIcon/></IconButton>}\n                    </Toolbar>\n                </AppBar>\n                <Grid container spacing={16}>\n                    <Grid item xs={12}>\n                        <ExpansionPanel>\n                            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                                <Typography className={classes.heading}>\n                                    {this.state.connected ? <NetworkOnIcon/> : <NetworkOffIcon/>}\n                                    連線\n                                </Typography>\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails>\n                                <Grid container spacing={16}>\n                                    <Grid item xs={12} lg={6}>\n                                        <TextField\n                                            id=\"network-channel\"\n                                            label=\"Channel\"\n                                            value={this.state.channel}\n                                            defaultValue={this.state.channel}\n                                            className={classes.textField}\n                                            margin=\"normal\"\n                                            onChange={event => {\n                                                const value = event.target.value;\n                                                this.setState(() => ({channel: value}));\n                                            }}\n                                        />\n                                    </Grid>\n                                    <Grid item xs={12} lg={6}>\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={() => {\n                                            if(this.wsProxy.current) {\n                                                this.wsProxy.current.open(this.state.channel);\n                                            }\n                                        }}>\n                                            Open\n                                        </Button>\n                                        <Button variant=\"contained\" className={classes.button} onClick={() => {\n                                            if(this.wsProxy.current) {\n                                                this.wsProxy.current.exit(this.state.clientId);\n                                                this.wsProxy.current.close();\n                                            }\n                                        }}>\n                                            Close\n                                        </Button>\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <TextField\n                                            id=\"game-name\"\n                                            fullWidth\n                                            label=\"名稱\"\n                                            value={this.state.clientName}\n                                            defaultValue={this.state.clientName}\n                                            className={classes.textField}\n                                            margin=\"normal\"\n                                            onChange={event => {\n                                                const value = event.target.value;\n                                                this.setState(() => ({clientName: value}));\n                                            }}\n                                        />\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={() => {\n                                            if(this.wsProxy.current) {\n                                                _saveClientFromStorage({id: this.state.clientId, name: this.state.clientName});\n                                                this.wsProxy.current.join(this.state.clientId, this.state.clientName);\n                                            }\n                                        }}>\n                                            加入\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </ExpansionPanelDetails>\n                        </ExpansionPanel>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Button className={classes.button} onClick={() => {\n                            if(this.wsProxy.current) {\n                                this.wsProxy.current.ready();\n                            }\n                        }}>Ready</Button>\n                        <Button className={classes.button} onClick={() => {\n                            if(this.wsProxy.current) {\n                                this.wsProxy.current.end();\n                            }\n                        }}>End</Button>\n                        <Button className={classes.button} onClick={() => {\n                            if(this.wsProxy.current) {\n                                this.wsProxy.current.play();\n                            }\n                        }}>Play</Button>\n                        <Button className={classes.button} onClick={() => {\n                            if(this.wsProxy.current) {\n                                this.wsProxy.current.pause();\n                            }\n                        }}>Pause</Button>\n                        <Button className={classes.button} onClick={() => {\n                            if(this.wsProxy.current) {\n                                this.wsProxy.current.next();\n                            }\n                        }}>Next</Button>\n                    </Grid>\n                    <Grid item xs={12}>\n                        {this.renderClients(this.state.clients)}\n                    </Grid>\n                </Grid>\n                <WebSocketProxy\n                    clientId={this.state.clientId}\n                    ref={this.wsProxy}\n                    onTurnTo={this.handelTurnTo}\n                    onChangeClients={this.handelChangeClient}\n                    onChangeGameState={state => {\n                        this.setState(() => ({gameState: state}));\n                    }}\n                    onTurnYou={this.handleTurnYou}\n                    onChangeConnected={connected => {\n                        this.setState(() => ({connected}));\n                    }}\n                    onChangeThinkTimeOut={timeout => {\n                        this.setState(() => ({thinkTimeOut: timeout}));\n                    }}\n                    onChangeDelayTimeOut={timeout => {\n                        this.setState(() => ({delayTimeOut: timeout}));\n                    }} />\n                <audio id=\"player\" src=\"#\" ref={this.audioComponent}/>\n                <SettingDialog open={this.state.settingDialog} onClose={() => {\n                    this.setState(() => ({settingDialog: false}))\n                }} onSave={() => {\n                    if(this.wsProxy.current) {\n                        this.wsProxy.current.changeTimeout({\n                            thinkTimeOut: this.state.thinkTimeOut,\n                            delayTimeOut: this.state.delayTimeOut,\n                        });\n                    }\n                }}>\n                    <TextField\n                        id=\"setting-think-timeout\"\n                        fullWidth\n                        label=\"思考時間\"\n                        value={this.state.thinkTimeOut}\n                        defaultValue={this.state.thinkTimeOut}\n                        className={classes.textField}\n                        helperText={__convertVisibleMS(this.state.thinkTimeOut)}\n                        margin=\"normal\"\n                        onChange={event => {\n                            const value = event.target.value;\n                            this.setState(() => ({thinkTimeOut: +value}));\n                        }}\n                    />\n                    <TextField\n                        id=\"setting-delay-timeout\"\n                        fullWidth\n                        label=\"延時時間\"\n                        value={this.state.delayTimeOut}\n                        defaultValue={this.state.delayTimeOut}\n                        className={classes.textField}\n                        helperText={__convertVisibleMS(this.state.delayTimeOut)}\n                        margin=\"normal\"\n                        onChange={event => {\n                            const value = event.target.value;\n                            this.setState(() => ({delayTimeOut: +value}));\n                        }}\n                    />\n                </SettingDialog>\n                <TimeoutFullScreen title={'時間到了'} open={this.state.turnTimeoutDialog} onClose={this.handleCloseTurnTimeoutDialog}>\n                    <Button className={classes.bigButton} variant=\"contained\" onClick={() => {\n                        this.handleTurnYou(this.state.delayTimeOut);\n                        this.handleCloseTurnTimeoutDialog();\n                    }}>\n                        再一下\n                    </Button>\n                    <Button className={classes.bigButton} variant=\"contained\" color=\"primary\" onClick={() => {\n                        if(this.wsProxy.current) {\n                            this.wsProxy.current.next();\n                        }\n                        this.handleCloseTurnTimeoutDialog();\n                    }}>\n                        下一位\n                    </Button>\n                </TimeoutFullScreen>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}