{"version":3,"sources":["WebSocketProxy.tsx","SettingDialog.tsx","TimeoutFullScreen.tsx","App.tsx","serviceWorker.js","index.js"],"names":["GameStateType","MessageType","DEFAULT_EPIC","KEEP_ALIVE","ms","NodeMessage","_ref","channel","type","clientId","Object","classCallCheck","this","unknown","JSON","stringify","toObject","GameContextMessage","context","_this","possibleConstructorReturn","getPrototypeOf","call","gameStateChange","state","ready","clients","currentClientId","thinkTimeOut","delayTimeOut","epic","_","isNumber","org","get","prototype","objectSpread","TurnToMessage","_this2","turnTo","turnToClientId","GameStateManager","_ref2","getMeta","Error","clientName","find","client","id","push","name","order","length","enable","foundClient","pull","toString","end","pause","play","_ref3","_this3","candidateClients","filter","index","map","indexOf","clientLength","nextClientId","delta","sort","a","b","console","log","concat","MessageFactory","_ref4","MessageDispatcher","_ref5","topic","data","message","object","parse","emit","EventEmitter","WebSocketProxy","props","_this4","undefined","gameStateManager","messageFactory","messageDispatcher","connected","onChangeConnected","_this5","close","dispatcher","mqtt","connect","mqttUrl","keepalive","on","subscribe","err","error","onConnected","next","newState","loadCurrentState","getHost","join","onChangeThinkTimeOut","onChangeDelayTimeOut","onChangeClients","onChangeGameState","onTurnTo","onChangeEpic","msg","onTurnYou","onNotTurnYou","onError","joinClient","publish","qos","retain","exitClient","changeToPlay","info","getTurnInfo","e","onEmptyClientInEpic","getStateMessage","changeToPause","changeToEnd","_ref6","changeTimeout","changeToReady","deltaOrder","deltaEpic","toggleEnable","deltaClientEpic","nextEpic","orders","max","isEmpty","react_default","createElement","className","children","Component","Transition","Slide_default","assign","direction","AlertDialogSlide","handleSave","onSave","handleClose","onClose","Dialog_default","open","TransitionComponent","keepMounted","aria-labelledby","aria-describedby","DialogTitle_default","DialogContent_default","DialogActions_default","Button_default","onClick","color","React","FullScreenDialog","_this$props","classes","_this$props$title","title","fullScreen","AppBar_default","appBar","Toolbar_default","IconButton_default","aria-label","Close_default","Typography_default","variant","flex","withStyles","position","TIME_REMAIN_STEP","__showSnackbar","contentString","swalOptions","content","element","attributes","value","swal","__convertVisibleMS","stack","_saveClientFromStorage","sessionStorage","setItem","_loadClientFromStorage","getItem","defaultId","Math","random","substr","__replaceSpeechText","text","replaceObject","result","String","forEach","key","replace","App","gameState","settingDialog","turnTimeoutDialog","delayTurnMeSpeechText","turnMeSpeechText","timeoutSpeechText","timeoutTimer","timeRemain","timeRemainTimer","nextEpicDialog","wsProxy","createRef","audioComponent","handelChangeClient","bind","assertThisInitialized","renderClients","handelTurnTo","handleTurnYou","handleCloseTurnTimeoutDialog","clearTimeoutTimer","setTimeoutTimer","countdownTimer","playTTS","fetch","method","then","response","json","setState","catch","speechText","arguments","current","q","encodeURIComponent","src","setAttribute","load","newTimeRemain","timer","setTimeout","callback","timeout","clearTimeout","turnMeText","handleOpenTurnTimeoutDialog","_this6","_this7","Items","ExpansionPanel_default","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","classname","App-highlight","ExpansionPanelDetails_default","RemoveCircle_default","AddCircle_default","Switch_default","checked","ArrowUpward_default","ArrowDownward_default","exit","Delete_default","clientPanel","_this8","renderGameState","grow","Settings_default","Grid_default","container","spacing","item","xs","heading","Wifi_default","WifiOff_default","TextField_default","fullWidth","label","defaultValue","textField","margin","onChange","event","target","button","row","Avatar_default","purpleAvatar","src_WebSocketProxy","ref","handleOpenNextEpicDialog","SettingDialog","helperText","TimeoutFullScreen","bigButton","handleDelayTurnYou","nextClientEpic","handleCloseNextEpicDialog","theme","root","flexGrow","fontSize","typography","pxToRem","fontWeight","fontWeightRegular","marginLeft","unit","marginRight","width","height","backgroundColor","deepPurple","display","justifyContent","mixins","gutters","paddingTop","paddingBottom","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.87603d63.chunk.js","sourcesContent":["import mqtt from 'mqtt';\nimport React, { Component } from 'react';\nimport {object} from \"prop-types\";\nimport EventEmitter from 'eventemitter3'\nimport _ from 'lodash';\nimport ms from 'ms';\n\nconst DEFAULT_ORDER = 1;\nconst DEFAULT_EPIC = 1;\nconst DEFAULT_ENABLE = true;\nconst KEEP_ALIVE = ms('5h') / 1000; // sec\n\nexport enum GameStateType {\n    ready = 'GameStateTypeReady',\n    play = 'GameStateTypePlay',\n    pause = 'GameStateTypePause',\n    end = 'GameStateTypeEnd',\n}\n\nexport enum MessageType {\n    unknown = 'unknown',\n    turnTo = 'turnTo',\n    gameStateChange = 'gameStateChange',\n}\n\nexport interface MqttClientMeta {\n    id: string,\n    name: string,\n    order: number,\n    epic: number,\n    enable: boolean,\n}\n\ninterface TurnInfo {\n    currentClientId: string,\n    nextClientId: string,\n}\n\ninterface MessageMeta {\n    clientId: string,\n    channel: string,\n}\n\nclass NodeMessage {\n    channel = '';\n    type?: MessageType = MessageType.unknown;\n    readonly clientId: string;\n    constructor({channel, type, clientId}: {channel: string, type?: MessageType, clientId: string}) {\n        this.channel = channel;\n        this.clientId = clientId;\n        if(this.type) {\n            this.type = type;\n        }\n    }\n    toObject() : object {\n        return {\n            type: this.type,\n            channel: this.channel,\n            clientId: this.clientId,\n        };\n    }\n    toString() : string {\n        return JSON.stringify(this.toObject());\n    }\n}\n\nclass GameContextMessage extends NodeMessage {\n    type = MessageType.gameStateChange;\n    state = GameStateType.ready;\n    clients: Array<MqttClientMeta> = [];\n    currentClientId: string = '';\n    thinkTimeOut: number = ms('5s');\n    delayTimeOut: number = ms('2s');\n    epic: number = DEFAULT_EPIC;\n\n    constructor(context: any) {\n        super(context);\n        if(context && context.state) {\n            this.state = context.state;\n        }\n\n        if(context && context.clients) {\n            this.clients = context.clients;\n        }\n\n        if(context && context.currentClientId) {\n            this.currentClientId = context.currentClientId;\n        }\n\n        if(context && context.thinkTimeOut) {\n            this.thinkTimeOut = context.thinkTimeOut;\n        }\n\n        if(context && context.delayTimeOut) {\n            this.delayTimeOut = context.delayTimeOut;\n        }\n\n        if(context && _.isNumber(context.epic)) {\n            this.epic = context.epic;\n        }\n    }\n    toObject() {\n        const org = super.toObject();\n        return {\n            ...org,\n            state: this.state,\n            clients: this.clients,\n            currentClientId: this.currentClientId,\n            thinkTimeOut: this.thinkTimeOut,\n            delayTimeOut: this.delayTimeOut,\n            epic: this.epic,\n        };\n    }\n    getHost() {\n        return this.clientId;\n    }\n}\n\nclass TurnToMessage extends NodeMessage {\n    type = MessageType.turnTo;\n    turnToClientId: string = '';\n    constructor(context: any) {\n        super(context);\n        if(context.turnToClientId) {\n            this.turnToClientId = context.turnToClientId;\n        }\n    }\n    toObject() {\n        const org = super.toObject();\n        return {...org, turnToClientId: this.turnToClientId};\n    }\n}\n\nclass GameStateManager {\n    channel = '';\n    clientId = '';\n    context: GameContextMessage = new GameContextMessage(this.getMeta());\n\n    constructor({channel, clientId} : MessageMeta) {\n        this.channel = channel;\n        this.clientId = clientId;\n\n        this.context =  new GameContextMessage(this.getMeta());\n    }\n\n    private getMeta(): MessageMeta {\n        return {\n            channel: this.channel,\n            clientId: this.clientId,\n        };\n    }\n\n    loadCurrentState(state: GameContextMessage) {\n        if(!(state instanceof GameContextMessage)) {\n            throw new Error('can not load current state');\n        }\n        this.context = state;\n        return this.context;\n    }\n    joinClient(clientId: string, clientName: string) {\n        const foundClient = _.find<MqttClientMeta>(this.context.clients, (client) => client.id === clientId);\n        if(!foundClient) {\n            this.context.clients.push({\n                id: clientId,\n                name: clientName,\n                order: this.context.clients.length + DEFAULT_ORDER,\n                epic: this.context.epic,\n                enable: DEFAULT_ENABLE,\n            });\n        }\n        return this.context;\n    }\n    exitClient(clientId: string) {\n        const foundClient = _.find<MqttClientMeta>(this.context.clients, (client) => client.id === clientId);\n        if(foundClient) {\n            _.pull(this.context.clients, foundClient);\n        }\n        return this.context;\n    }\n\n    getStateMessage(): string {\n        return this.context.toString();\n    }\n    changeToReady() {\n        this.context.state = GameStateType.ready;\n        return this.context;\n    }\n    changeToEnd() {\n        this.context.state = GameStateType.end;\n        return this.context;\n    }\n    changeToPause() {\n        this.context.state = GameStateType.pause;\n        return this.context;\n    }\n    changeToPlay() {\n        this.context.state = GameStateType.play;\n        return this.context;\n    }\n    changeTimeout({thinkTimeOut, delayTimeOut} : {thinkTimeOut: number, delayTimeOut: number}) {\n        this.context.thinkTimeOut = thinkTimeOut;\n        this.context.delayTimeOut = delayTimeOut;\n        return this.context;\n    }\n\n    /**\n     *\n     * @return {TurnInfo | undefined}\n     * @throws Error\n     */\n    getTurnInfo(): TurnInfo | undefined {\n        if(this.context.clients.length === 0) {\n            throw new Error('At least one client');\n        }\n\n        const currentClientId = this.context.currentClientId;\n\n        // candidate clients\n        const candidateClients = this.context.clients.filter(client => client.enable && (this.context.epic === client.epic));\n        if(candidateClients.length === 0) {\n            return;\n        }\n\n        let index = candidateClients.map(client => client.id).indexOf(currentClientId);\n        index = (index === -1) ? 0 : index;\n\n        const clientLength = candidateClients.length;\n        return {\n            currentClientId: candidateClients[index].id,\n            nextClientId: candidateClients[(index + 1) % clientLength].id,\n        }\n    }\n    deltaOrder(clientId: string, delta: number) {\n        const foundClient = _.find(this.context.clients, client => client.id === clientId);\n        if(!foundClient) {\n            console.log(`[deltaOrder] Can not find ${clientId}`);\n            return this.context;\n        }\n        foundClient.order += delta;\n\n        this.context.clients = this.context.clients.sort((a, b) => a.epic - b.epic || a.order - b.order);\n        return this.context;\n    }\n    deltaEpic(delta: number) {\n        this.context.epic += delta;\n        return this.context;\n    }\n    deltaClientEpic(clientId: string, delta: number, order?: number) {\n        const foundClient = _.find(this.context.clients, client => client.id === clientId);\n        if(!foundClient) {\n            console.log(`[deltaClientEpic] Can not find ${clientId}`);\n            return this.context;\n        }\n\n        foundClient.epic += delta;\n        if(_.isNumber(order)) {\n            foundClient.order = order;\n        }\n\n        this.context.clients = this.context.clients.sort((a, b) => a.epic - b.epic || a.order - b.order);\n        return this.context;\n    }\n    toggleEnable(clientId: string) {\n        const foundClient = _.find(this.context.clients, client => client.id === clientId);\n        if(!foundClient) {\n            console.log(`[deltaOrder] Can not find ${clientId}`);\n            return;\n        }\n        foundClient.enable = !foundClient.enable;\n        return this.context;\n    }\n}\n\nclass MessageFactory {\n    channel = '';\n    clientId = '';\n    constructor({channel, clientId} : MessageMeta) {\n        this.channel = channel;\n        this.clientId = clientId;\n    }\n\n    private getMeta(): MessageMeta {\n        return {\n            channel: this.channel,\n            clientId: this.clientId,\n        };\n    }\n    turnTo(clientId: string): string {\n        const msg = new TurnToMessage({...this.getMeta(), turnToClientId: clientId});\n        return msg.toString();\n    }\n}\n\nclass MessageDispatcher extends EventEmitter {\n    next({topic, message}: {topic: string, message: any}) {\n        let data;\n        if( message instanceof object) {\n            data = message\n        } else {\n            data = JSON.parse(message.toString());\n        }\n\n        if(!data.type) {\n            this.emit('error', new Error('can not find message type'));\n            return;\n        }\n\n        const type = data.type;\n        this.emit('message', data);\n        this.emit(type, data);\n    }\n}\n\ninterface IWebSocketProxyProps {\n    mqttUrl: string,\n    onChangeClients?: (clients: Array<MqttClientMeta>) => void,\n    onChangeGameState?: (clients: GameStateType) => void,\n    onChangeThinkTimeOut?: (timeout: number) => void,\n    onChangeDelayTimeOut?: (timeout: number) => void,\n    onError?: (error: Error) => void,\n    onTurnYou?: () => void,\n    onNotTurnYou?: () => void,\n    onTurnTo?: (clientId: string) => void,\n    onConnected?: (mqttClient: mqtt.MqttClient) => void,\n    onChangeConnected?: (connected: boolean) => void,\n    onEmptyClientInEpic?: () => void,\n    clientId: string,\n    onChangeEpic?: (timeout: number) => void,\n}\n\ninterface IWebSocketProxyState {\n}\n\nclass WebSocketProxy extends Component<IWebSocketProxyProps, IWebSocketProxyState> {\n    client?: mqtt.MqttClient = undefined;\n    gameStateManager?: GameStateManager = undefined;\n    messageFactory?: MessageFactory = undefined;\n    messageDispatcher?: MessageDispatcher = undefined;\n    channel: string = 'testchannel';\n\n    constructor(props: any) {\n        super(props);\n    }\n\n    close() {\n        if(this.client) {\n            if(this.client.connected) {\n                this.client.end();\n            }\n            if(this.props.onChangeConnected) {\n                this.props.onChangeConnected(false);\n            }\n        }\n        this.client = undefined;\n    }\n\n    open(channel: string) {\n        this.close();\n\n        this.channel = channel;\n\n        const clientId = this.props.clientId;\n\n        const gameStateManager = new GameStateManager({channel, clientId});\n        const messageFactory = new MessageFactory({channel, clientId});\n        const dispatcher = new MessageDispatcher();\n\n        // Mqtt connection\n        const client = mqtt.connect(this.props.mqttUrl, {keepalive: KEEP_ALIVE, clientId});\n        client.on('connect',  () => {\n            client.subscribe(channel, (err) => {\n                if (err) {\n                    console.error(err);\n                }\n            });\n            if(this.props.onConnected) {\n                this.props.onConnected(client);\n            }\n            if(this.props.onChangeConnected) {\n                this.props.onChangeConnected(client.connected);\n            }\n        });\n        client.on('message', function (topic, message) {\n            dispatcher.next({topic, message});\n            // console.log(`topic = ${topic}, message = ${message}`)\n        });\n\n\n        // Event handler\n        dispatcher.on(MessageType.gameStateChange, (data) => {\n            // init game state\n            const newState = new GameContextMessage(data);\n\n            gameStateManager.loadCurrentState(newState);\n            console.log('==============================');\n            console.log('Channel by : ' + gameStateManager.context.channel);\n            console.log('thinkTimeOut : ' + ms(gameStateManager.context.thinkTimeOut));\n            console.log('delayTimeOut : ' + ms(gameStateManager.context.delayTimeOut));\n            console.log('Host by : ' + gameStateManager.context.getHost());\n            console.log('Game state : ' + gameStateManager.context.state);\n            console.log('Epic : ' + gameStateManager.context.epic);\n            console.log('Current : ' + gameStateManager.context.currentClientId);\n            console.log('Clients : \\n' + gameStateManager.context.clients.map(client => `${client.enable} - (${client.epic},${client.order}) - ${client.name} - ${client.id}`).join('\\n'));\n            console.log('==============================');\n\n            if(this.props.onChangeThinkTimeOut) {\n                this.props.onChangeThinkTimeOut(gameStateManager.context.thinkTimeOut);\n            }\n            if(this.props.onChangeDelayTimeOut) {\n                this.props.onChangeDelayTimeOut(gameStateManager.context.delayTimeOut);\n            }\n            if(this.props.onChangeClients) {\n                this.props.onChangeClients(gameStateManager.context.clients);\n            }\n            if(this.props.onChangeGameState) {\n                this.props.onChangeGameState(gameStateManager.context.state);\n            }\n            if(this.props.onTurnTo) {\n                this.props.onTurnTo(gameStateManager.context.currentClientId);\n            }\n            if(this.props.onChangeEpic) {\n                this.props.onChangeEpic(gameStateManager.context.epic);\n            }\n\n            // dispatch game state\n            if(gameStateManager.context.state === GameStateType.play) {\n                dispatcher.emit(GameStateType.play);\n            }\n            if(gameStateManager.context.state === GameStateType.ready) {\n                dispatcher.emit(GameStateType.ready);\n            }\n            if(gameStateManager.context.state === GameStateType.pause) {\n                dispatcher.emit(GameStateType.pause);\n            }\n            if(gameStateManager.context.state === GameStateType.end) {\n                dispatcher.emit(GameStateType.end);\n            }\n        });\n\n        dispatcher.on(MessageType.turnTo, (data) => {\n            const msg = new TurnToMessage(data);\n            if(this.props.onTurnTo) {\n                this.props.onTurnTo(msg.turnToClientId);\n            }\n\n            if(this.props.clientId === msg.turnToClientId) {\n                // console.log('turn to ==> ' + this.props.clientId);\n                if(this.props.onTurnYou) {\n                    this.props.onTurnYou();\n                }\n            } else {\n                if(this.props.onNotTurnYou) {\n                    this.props.onNotTurnYou();\n                }\n            }\n        });\n\n        // helper\n        this.client = client;\n        this.gameStateManager = gameStateManager;\n        this.messageFactory = messageFactory;\n        this.messageDispatcher = dispatcher;\n    }\n\n    join(clientId: string, clientName: string) {\n        if(this.gameStateManager && this.gameStateManager.context.state !== GameStateType.ready) {\n            const error = new Error('Only join client for \"ready\" state');\n            console.error(error);\n            if(this.props.onError) {\n                this.props.onError(error);\n            }\n            return;\n        }\n\n        if(this.client && this.gameStateManager) {\n            const state = this.gameStateManager.joinClient(clientId, clientName);\n            this.client.publish(this.channel, state.toString(), {qos:2, retain: true});\n        }\n    }\n\n    exit(clientId: string) {\n        if(this.client && this.gameStateManager) {\n            const state = this.gameStateManager.exitClient(clientId);\n            this.client.publish(this.channel, state.toString(), {qos:2, retain: true});\n        }\n    }\n\n    play() {\n        if(this.client && this.gameStateManager && this.messageFactory) {\n            const context = this.gameStateManager.changeToPlay();\n            this.client.publish(this.channel, this.messageFactory.turnTo(context.currentClientId), {qos:2});\n            this.client.publish(this.channel, context.toString(), {qos:2, retain: true})\n        }\n    }\n\n    next() {\n        if(this.client && this.gameStateManager) {\n            const context = this.gameStateManager.context;\n\n            let info = undefined;\n            try {\n                info = this.gameStateManager.getTurnInfo();\n            } catch (e) {\n                console.error(e);\n            }\n\n            if(info) {\n                if(this.messageFactory && info && context.currentClientId === '') { // First\n                    context.currentClientId = info ? info.currentClientId : '';\n                    this.client.publish(this.channel, this.messageFactory.turnTo(context.currentClientId), {qos:2});\n                } else if(this.messageFactory && info &&  context.currentClientId !== info.nextClientId) { // in playing\n                    context.currentClientId = info ? info.nextClientId : '';\n                    this.client.publish(this.channel, this.messageFactory.turnTo(context.currentClientId), {qos:2});\n                } else if(this.messageFactory && info &&  context.currentClientId && (context.currentClientId === info.nextClientId)) { // in playing\n                    context.currentClientId = info ? info.nextClientId : '';\n                    this.client.publish(this.channel, this.messageFactory.turnTo(context.currentClientId), {qos:2});\n                }\n            } else { // no client in the epic\n                if(this.props.onEmptyClientInEpic) {\n                    this.props.onEmptyClientInEpic();\n                }\n            }\n\n            // Change game context\n            this.client.publish(this.channel, this.gameStateManager.getStateMessage(), {qos:2, retain: true});\n        }\n    }\n\n    pause() {\n        if(this.client && this.gameStateManager) {\n            this.gameStateManager.changeToPause();\n            this.client.publish(this.channel, this.gameStateManager.getStateMessage(), {qos:2, retain: true})\n        }\n    }\n\n    end() {\n        if(this.client && this.gameStateManager) {\n            const context = this.gameStateManager.changeToEnd();\n            context.currentClientId = '';\n            this.client.publish(this.channel, this.gameStateManager.getStateMessage(), {qos:2, retain: true})\n        }\n    }\n\n    changeTimeout({thinkTimeOut, delayTimeOut} : {thinkTimeOut: number, delayTimeOut: number}) {\n        if(this.client && this.gameStateManager) {\n            const context = this.gameStateManager.changeTimeout({thinkTimeOut, delayTimeOut});\n            this.client.publish(this.channel, context.toString(), {qos:2, retain: true})\n        }\n    }\n\n    ready() {\n        if(this.client && this.gameStateManager) {\n            const context = this.gameStateManager.changeToReady();\n            context.currentClientId = '';\n            this.client.publish(this.channel, this.gameStateManager.getStateMessage(), {qos:2, retain: true})\n        }\n    }\n\n    deltaOrder(clientId: string, delta: number) {\n        if(this.client && this.gameStateManager) {\n            const context = this.gameStateManager.deltaOrder(clientId, delta);\n            this.client.publish(this.channel, this.gameStateManager.getStateMessage(), {qos:2, retain: true})\n        }\n    }\n\n    deltaEpic(delta: number) {\n        if(this.client && this.gameStateManager) {\n            const context = this.gameStateManager.deltaEpic(delta);\n            this.client.publish(this.channel, this.gameStateManager.getStateMessage(), {qos:2, retain: true})\n        }\n    }\n\n    toggleEnable(clientId: string) {\n        if(this.client && this.gameStateManager) {\n            const context = this.gameStateManager.toggleEnable(clientId);\n            this.client.publish(this.channel, this.gameStateManager.getStateMessage(), {qos:2, retain: true})\n        }\n    }\n\n    deltaClientEpic(clientId: string, delta: number) {\n        if(this.client && this.gameStateManager) {\n            const context = this.gameStateManager.deltaClientEpic(clientId, delta);\n            this.client.publish(this.channel, this.gameStateManager.getStateMessage(), {qos:2, retain: true})\n        }\n    }\n\n    nextClientEpic(clientId: string, delta: number) {\n        if(this.client && this.gameStateManager) {\n            const nextEpic  = this.gameStateManager.context.epic + delta;\n            const candidateClients = this.gameStateManager.context.clients.filter(client => client.enable && (nextEpic === client.epic));\n            const orders = candidateClients.map(client => client.order);\n\n            let max = _.isEmpty(orders) ? 0 : _.max(orders);\n            max = max || 0;\n            const order = max + DEFAULT_ORDER;\n\n            const context = this.gameStateManager.deltaClientEpic(clientId, delta, order);\n            this.client.publish(this.channel, this.gameStateManager.getStateMessage(), {qos:2, retain: true})\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"websocket-proxy\">\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport default WebSocketProxy;\n","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\n\nfunction Transition(props: any) {\n    return <Slide direction=\"up\" {...props} />;\n}\n\n\ninterface IAlertDialogSlide {\n    // classes: any,\n    open: boolean,\n    onClose?: () => void,\n    onSave?: () => void,\n}\n\n\nclass AlertDialogSlide extends React.Component<IAlertDialogSlide> {\n    handleSave = () => {\n        if(this.props.onSave) {\n            this.props.onSave();\n            this.handleClose();\n        }\n    };\n    handleClose = () => {\n        if(this.props.onClose) {\n            this.props.onClose();\n        }\n    };\n\n    render() {\n        return (\n            <div>\n                <Dialog\n                    open={this.props.open}\n                    TransitionComponent={Transition}\n                    keepMounted\n                    onClose={this.handleClose}\n                    aria-labelledby=\"alert-dialog-slide-title\"\n                    aria-describedby=\"alert-dialog-slide-description\"\n                >\n                    <DialogTitle id=\"alert-dialog-slide-title\">\n                        {\"設定\"}\n                    </DialogTitle>\n                    <DialogContent>\n                        {this.props.children}\n                    </DialogContent>\n                    <DialogActions>\n                        <Button onClick={this.handleClose} color=\"primary\">\n                            取消\n                        </Button>\n                        <Button onClick={this.handleSave} color=\"primary\">\n                            儲存\n                        </Button>\n                    </DialogActions>\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default AlertDialogSlide;\n","import React from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\n\nconst styles: any = {\n    appBar: {\n        position: 'relative',\n    },\n    flex: {\n        flex: 1,\n    },\n};\n\nfunction Transition(props: any) {\n    return <Slide direction=\"up\" {...props} />;\n}\n\ninterface IFullScreenDialogProps {\n    classes: any,\n    open: boolean,\n    title?: string\n    onClose?: () => void,\n}\n\nclass FullScreenDialog extends React.Component<IFullScreenDialogProps> {\n    handleClose = () => {\n        if(this.props.onClose) {\n            this.props.onClose();\n        }\n    };\n\n    render() {\n        const { classes, title = '' } = this.props;\n        return (\n            <div>\n                <Dialog\n                    fullScreen\n                    open={this.props.open}\n                    onClose={this.handleClose}\n                    TransitionComponent={Transition}\n                >\n                    <AppBar className={classes.appBar}>\n                        <Toolbar>\n                            <IconButton color=\"inherit\" onClick={this.handleClose} aria-label=\"Close\">\n                                <CloseIcon />\n                            </IconButton>\n                            <Typography variant=\"h6\" color=\"inherit\" className={classes.flex}>\n                                {title}\n                            </Typography>\n                        </Toolbar>\n                    </AppBar>\n                    {this.props.children}\n                </Dialog>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(FullScreenDialog);\n","import React, {Component, Fragment} from 'react';\nimport classname from 'classnames';\nimport _ from 'lodash';\nimport { withStyles } from '@material-ui/core/styles';\nimport ms from 'ms';\nimport swal from 'sweetalert';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport NetworkOnIcon from '@material-ui/icons/Wifi';\nimport NetworkOffIcon from '@material-ui/icons/WifiOff';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport TextField from '@material-ui/core/TextField';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\nimport RemoveCircleIcon from '@material-ui/icons/RemoveCircle';\nimport Switch from '@material-ui/core/Switch';\nimport Avatar from '@material-ui/core/Avatar';\nimport deepPurple from '@material-ui/core/colors/deepPurple';\n\nimport './App.css';\nimport WebSocketProxy, {GameStateType, MqttClientMeta} from './WebSocketProxy';\nimport SettingDialog from './SettingDialog';\nimport TimeoutFullScreen from './TimeoutFullScreen';\n\nconst TIME_REMAIN_STEP = ms('1s');\n\nfunction __showSnackbar(title: string, contentString: string) {\n    const contentOptions = {\n        element: 'textarea',\n        attributes: {\n            value: contentString,\n        },\n    };\n    const swalOptions = {\n        title,\n        // icon: 'info',\n        content: contentOptions,\n        // buttons: [],\n        // timer: 3000,\n    };\n    swal(swalOptions);\n}\n\nfunction __convertVisibleMS(value: any) {\n    try {\n        return ms(value);\n    } catch (e) {\n        console.error(e);\n        __showSnackbar(e.message, e.stack);\n    }\n    return '';\n}\n\nfunction _saveClientFromStorage(client: {id: string, name: string}) {\n    sessionStorage.setItem('clientId', client.id);\n    sessionStorage.setItem('clientName', client.name);\n}\n\nfunction _loadClientFromStorage(): {id: string, name: string} {\n    const clientId = sessionStorage.getItem('clientId');\n    const clientName = sessionStorage.getItem('clientName');\n    const defaultId = 'you-turn_' + Math.random().toString(16).substr(2, 8);\n    const client =  {\n        id: clientId || defaultId,\n        name: clientName || defaultId,\n    };\n    _saveClientFromStorage(client);\n    return client;\n}\n\nconst styles = (theme: any) => ({\n    root: {\n        flexGrow: 1,\n    },\n    grow: {\n        flexGrow: 1,\n    },\n    heading: {\n        fontSize: theme.typography.pxToRem(15),\n        fontWeight: theme.typography.fontWeightRegular,\n    },\n    textField: {\n        marginLeft: theme.spacing.unit,\n        marginRight: theme.spacing.unit,\n    },\n    button: {\n        margin: theme.spacing.unit,\n    },\n    bigButton: {\n        margin: theme.spacing.unit,\n        width: \"95%\",\n        height: \"32%\",\n    },\n    purpleAvatar: {\n        margin: 10,\n        color: '#fff',\n        backgroundColor: deepPurple[500],\n    },\n    row: {\n        display: 'flex',\n        justifyContent: 'center',\n    },\n    clientPanel: {\n        ...theme.mixins.gutters(),\n        paddingTop: theme.spacing.unit * 2,\n        paddingBottom: theme.spacing.unit * 2,\n    }\n});\n\nfunction __replaceSpeechText(text: string, replaceObject: {name: string}) {\n    let result = String(text);\n    _.forEach(replaceObject, (value, key) => {\n        result = result.replace('${' + key + '}', value);\n    });\n    return result;\n}\n\ninterface IAppProps {\n    classes: any,\n}\n\ninterface IAppState {\n    mqttUrl: string,\n    clients: Array<MqttClientMeta>,\n    clientName: string,\n    clientId: string,\n    channel: string,\n    gameState: GameStateType,\n    currentClientId: string,\n    connected: boolean,\n    thinkTimeOut: number,\n    delayTimeOut: number,\n    settingDialog: boolean,\n    turnTimeoutDialog: boolean,\n    turnMeSpeechText: string,\n    timeoutSpeechText: string,\n    delayTurnMeSpeechText: string,\n    timeoutTimer?: NodeJS.Timeout,\n    timeRemain: number,\n    timeRemainTimer?: NodeJS.Timeout,\n    epic: number,\n    nextEpicDialog: boolean,\n}\n\nclass App extends Component<IAppProps, IAppState> {\n    wsProxy: React.RefObject<WebSocketProxy>;\n    audioComponent: React.RefObject<HTMLAudioElement>;\n    state = {\n        mqttUrl: '',\n        clients: [],\n        clientId: _loadClientFromStorage().id,\n        clientName: _loadClientFromStorage().name,\n        channel: 'testchannel',\n        gameState: GameStateType.end,\n        currentClientId: '',\n        connected: false,\n        thinkTimeOut: 0,\n        delayTimeOut: 0,\n        settingDialog: false,\n        turnTimeoutDialog: false,\n        delayTurnMeSpeechText: '${name} 再想一下',\n        turnMeSpeechText: '${name} 換你了',\n        timeoutSpeechText: '${name} 時間到了',\n        timeoutTimer: undefined,\n        timeRemain: 0,\n        timeRemainTimer: undefined,\n        epic: 0,\n        nextEpicDialog: false,\n    };\n\n    constructor(props: any) {\n        super(props);\n        this.wsProxy = React.createRef();\n        this.audioComponent = React.createRef();\n        this.handelChangeClient = this.handelChangeClient.bind(this);\n        this.renderClients = this.renderClients.bind(this);\n        this.handelTurnTo = this.handelTurnTo.bind(this);\n        this.handleTurnYou = this.handleTurnYou.bind(this);\n        this.handleCloseTurnTimeoutDialog = this.handleCloseTurnTimeoutDialog.bind(this);\n        this.clearTimeoutTimer = this.clearTimeoutTimer.bind(this);\n        this.setTimeoutTimer = this.setTimeoutTimer.bind(this);\n        this.countdownTimer = this.countdownTimer.bind(this);\n        this.playTTS = this.playTTS.bind(this);\n    }\n\n    componentDidMount() {\n        // Auto connected\n        // if(this.wsProxy.current) {\n        //     this.wsProxy.current.open(this.state.channel);\n        // }\n\n        fetch(\"/mymqtt\", {\n            method: \"GET\",\n        })\n            .then(response => response.json())\n            .then(data => {\n                if(data.mqttUrl) {\n                    this.setState(() => ({mqttUrl: data.mqttUrl}));\n                }\n            })\n            .catch(e => {\n                __showSnackbar(e.message, e.stack);\n            });\n    }\n\n    handelChangeClient(clients: Array<MqttClientMeta>) {\n        this.setState(() => ({clients}));\n    }\n\n    handelTurnTo(clientId: string) {\n        this.setState(() => ({currentClientId: clientId}));\n    }\n\n    handleCloseTurnTimeoutDialog() {\n        this.setState(() => ({turnTimeoutDialog: false}));\n    }\n    handleOpenTurnTimeoutDialog() {\n        this.setState(() => ({turnTimeoutDialog: true}));\n    }\n    handleCloseNextEpicDialog() {\n        this.setState(() => ({nextEpicDialog: false}));\n    }\n    handleOpenNextEpicDialog() {\n        this.setState(() => ({nextEpicDialog: true}));\n    }\n\n    playTTS(speechText: string, timeout:number = 0) {\n        if(this.state.gameState !== GameStateType.play) {\n            return;\n        }\n\n        // play\n        if(this.audioComponent.current) {\n            const q = encodeURIComponent(speechText);\n            // const src = 'http://translate.google.com/translate_tts?ie=UTF-8&total=1&idx=0&textlen=32&client=tw-ob&tl=en-gb&q=' + q;\n            // const src = 'http://translate.google.com/translate_tts?ie=UTF-8&total=1&idx=0&client=tw-ob&tl=zh-tw&q=' + q;\n            const src = `https://google-translate-proxy.herokuapp.com/api/tts?query=${q}&language=zh-TW&speed=0.5`;\n            this.audioComponent.current.setAttribute('src',  src);\n            this.audioComponent.current.load();\n            this.audioComponent.current.play();\n        }\n    }\n\n    countdownTimer(timeRemain: number) {\n        const newTimeRemain = timeRemain - TIME_REMAIN_STEP;\n\n        const timer = setTimeout(() => {\n            if(newTimeRemain > 0) {\n                this.countdownTimer(newTimeRemain)\n            } else {\n                this.setState(() => ({\n                    timeRemain: 0,\n                    timeRemainTimer: undefined,\n                }));\n            }\n        }, TIME_REMAIN_STEP);\n\n        this.setState(() => ({\n            timeRemain,\n            timeRemainTimer: timer,\n        }));\n    }\n\n    setTimeoutTimer(callback: () => void, timeout: number) {\n        if(this.state.gameState !== GameStateType.play) {\n            return;\n        }\n\n        this.clearTimeoutTimer(() => {\n            const timeoutTimer = setTimeout(callback, timeout);\n            this.countdownTimer(timeout);\n            this.setState(() => ({\n                timeoutTimer,\n                timeRemain: timeout,\n            }));\n        });\n    }\n\n    clearTimeoutTimer(callback?: () => void) {\n        // timeoutTimer\n        if(this.state.timeoutTimer) {\n            clearTimeout(this.state.timeoutTimer);\n        }\n\n        // timeRemainTimer\n        if(this.state.timeRemainTimer) {\n            clearTimeout(this.state.timeRemainTimer);\n        }\n\n        this.setState(() => ({\n            timeoutTimer: undefined,\n            timeRemainTimer: undefined,\n        }), callback);\n    }\n\n    handleTurnYou(timeout = this.state.thinkTimeOut) {\n        if(this.state.gameState !== GameStateType.play) {\n            return;\n        }\n\n        const clientName = this.state.clientName;\n\n        // Show: turn me\n        console.log('Turn me: ' + clientName);\n        const turnMeText = __replaceSpeechText(this.state.turnMeSpeechText,{name: clientName});\n        this.playTTS(turnMeText);\n\n        this.handleOpenTurnTimeoutDialog();\n\n        // Show: timeout\n        this.setTimeoutTimer(() => {\n            const speechText = __replaceSpeechText(this.state.timeoutSpeechText,{name: clientName});\n            this.playTTS(speechText);\n        }, timeout);\n    }\n\n    handleDelayTurnYou(timeout = this.state.delayTimeOut) {\n        if(this.state.gameState !== GameStateType.play) {\n            return;\n        }\n\n        const clientName = this.state.clientName;\n\n        // Show: turn me\n        const turnMeText = __replaceSpeechText(this.state.delayTurnMeSpeechText,{name: clientName});\n        this.playTTS(turnMeText);\n\n        // Show: timeout\n        this.setTimeoutTimer(() => {\n            const speechText = __replaceSpeechText(this.state.timeoutSpeechText,{name: clientName});\n            this.playTTS(speechText);\n        }, timeout);\n    }\n\n    renderClients(clients: Array<MqttClientMeta>) {\n        const {classes} = this.props;\n        const Items: any[] = [];\n        clients.forEach(client => {\n            Items.push((\n                <ExpansionPanel key={client.id}>\n                    <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                        <Typography variant=\"body1\">\n                            <span className={classname({'App-highlight': (client.id === this.state.currentClientId)})}>({client.epic},{client.order}) {client.name} - {client.id}</span>\n                        </Typography>\n                    </ExpansionPanelSummary>\n                    <ExpansionPanelDetails>\n                        <div>\n                            <IconButton onClick={() => {\n                                this.wsProxy.current && this.wsProxy.current.deltaClientEpic(client.id,-1);\n                            }}>\n                                <RemoveCircleIcon />\n                            </IconButton>\n                            <IconButton onClick={() => {\n                                this.wsProxy.current && this.wsProxy.current.deltaClientEpic(client.id,1);\n                            }}>\n                                <AddCircleIcon />\n                            </IconButton>\n                            <Switch\n                                checked={client.enable}\n                                onClick={() => {\n                                    this.wsProxy.current && this.wsProxy.current.toggleEnable(client.id);\n                                }}\n                                value={client.enable}\n                            />\n                            <IconButton onClick={() => {\n                                this.wsProxy.current && this.wsProxy.current.deltaOrder(client.id, -1);\n                            }}>\n                                <ArrowUpwardIcon />\n                            </IconButton>\n                            <IconButton onClick={() => {\n                                this.wsProxy.current && this.wsProxy.current.deltaOrder(client.id, 1);\n                            }}>\n                                <ArrowDownwardIcon />\n                            </IconButton>\n                            <IconButton onClick={() => {\n                                this.wsProxy.current && this.wsProxy.current.exit(client.id);\n                            }}>\n                                <DeleteIcon />\n                            </IconButton>\n                        </div>\n                    </ExpansionPanelDetails>\n                </ExpansionPanel>));\n        });\n\n        return (\n            <div className={classes.clientPanel}>\n                {Items}\n            </div>\n        );\n    }\n\n    renderGameState(state: GameStateType) {\n        if(state === GameStateType.play) {\n            return \"Play\";\n        }\n        if(state === GameStateType.ready) {\n            return \"Ready\";\n        }\n        if(state === GameStateType.end) {\n            return \"End\";\n        }\n        if(state === GameStateType.pause) {\n            return \"Pause\";\n        }\n        return \"End\";\n    }\n\n    render() {\n        const {classes} = this.props;\n        return (\n            <div className=\"App\">\n                <AppBar position=\"static\">\n                    <Toolbar>\n                        {this.renderGameState(this.state.gameState)}\n                        <Typography variant=\"title\" color=\"inherit\" className={classes.grow}>\n                            {this.state.clientName}\n                        </Typography>\n                        <Typography variant=\"caption\" color=\"inherit\" className={classes.grow}>\n                            {this.state.clientId}\n                        </Typography>\n                        {this.state.connected && <IconButton color=\"inherit\" onClick={()=>{\n                            this.setState(() => ({settingDialog: true}));\n                        }}><SettingsIcon/></IconButton>}\n                    </Toolbar>\n                </AppBar>\n                <Grid container spacing={16}>\n                    <Grid item xs={12}>\n                        <ExpansionPanel>\n                            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n                                <Typography className={classes.heading}>\n                                    {this.state.connected ? <NetworkOnIcon/> : <NetworkOffIcon/>}\n                                    連線\n                                </Typography>\n                            </ExpansionPanelSummary>\n                            <ExpansionPanelDetails>\n                                <Grid container spacing={16}>\n                                    <Grid item xs={12}>\n                                        <TextField\n                                            fullWidth\n                                            label=\"Server\"\n                                            value={this.state.mqttUrl}\n                                            defaultValue={this.state.mqttUrl}\n                                            className={classes.textField}\n                                            margin=\"normal\"\n                                            onChange={event => {\n                                                const value = event.target.value;\n                                                this.setState(() => ({mqttUrl: value}));\n                                            }}\n                                        />\n                                        <TextField\n                                            id=\"network-channel\"\n                                            fullWidth\n                                            label=\"Channel\"\n                                            value={this.state.channel}\n                                            defaultValue={this.state.channel}\n                                            className={classes.textField}\n                                            margin=\"normal\"\n                                            onChange={event => {\n                                                const value = event.target.value;\n                                                this.setState(() => ({channel: value}));\n                                            }}\n                                        />\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={() => {\n                                            if(this.wsProxy.current) {\n                                                this.wsProxy.current.open(this.state.channel);\n                                            }\n                                        }}>\n                                            Open\n                                        </Button>\n                                        <Button variant=\"contained\" className={classes.button} onClick={() => {\n                                            if(this.wsProxy.current) {\n                                                this.wsProxy.current.exit(this.state.clientId);\n                                                this.wsProxy.current.close();\n                                            }\n                                        }}>\n                                            Close\n                                        </Button>\n                                    </Grid>\n                                    <Grid item xs={12}>\n                                        <TextField\n                                            id=\"game-name\"\n                                            fullWidth\n                                            label=\"名稱\"\n                                            value={this.state.clientName}\n                                            defaultValue={this.state.clientName}\n                                            className={classes.textField}\n                                            margin=\"normal\"\n                                            onChange={event => {\n                                                const value = event.target.value;\n                                                this.setState(() => ({clientName: value}));\n                                            }}\n                                        />\n                                        <Button variant=\"contained\" color=\"primary\" className={classes.button} onClick={() => {\n                                            if(this.wsProxy.current) {\n                                                _saveClientFromStorage({id: this.state.clientId, name: this.state.clientName});\n                                                this.wsProxy.current.join(this.state.clientId, this.state.clientName);\n                                            }\n                                        }}>\n                                            加入\n                                        </Button>\n                                    </Grid>\n                                </Grid>\n                            </ExpansionPanelDetails>\n                        </ExpansionPanel>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <Button className={classes.button} onClick={() => {\n                            if(this.wsProxy.current) {\n                                this.wsProxy.current.ready();\n                            }\n                        }}>Ready</Button>\n                        <Button className={classes.button} onClick={() => {\n                            if(this.wsProxy.current) {\n                                this.wsProxy.current.end();\n                            }\n                        }}>End</Button>\n                        <Button className={classes.button} onClick={() => {\n                            if(this.wsProxy.current) {\n                                this.wsProxy.current.play();\n                            }\n                        }}>Play</Button>\n                        <Button className={classes.button} onClick={() => {\n                            if(this.wsProxy.current) {\n                                this.wsProxy.current.pause();\n                            }\n                        }}>Pause</Button>\n                        <Button className={classes.button} onClick={() => {\n                            if(this.wsProxy.current) {\n                                this.wsProxy.current.next();\n                            }\n                        }}>Next</Button>\n                    </Grid>\n                    <Grid item xs={12}>\n                        <div className={classes.row}>\n                            <IconButton onClick={() => {\n                                this.wsProxy.current && this.wsProxy.current.deltaEpic(-1);\n                            }}>\n                                <RemoveCircleIcon />\n                            </IconButton>\n                            <Avatar className={classes.purpleAvatar}>{this.state.epic}</Avatar>\n                            <IconButton onClick={() => {\n                                this.wsProxy.current && this.wsProxy.current.deltaEpic(1);\n                            }}>\n                                <AddCircleIcon />\n                            </IconButton>\n                        </div>\n                    </Grid>\n                    <Grid item xs={12}>\n                        {this.renderClients(this.state.clients)}\n                    </Grid>\n                </Grid>\n                <WebSocketProxy\n                    mqttUrl={this.state.mqttUrl}\n                    clientId={this.state.clientId}\n                    ref={this.wsProxy}\n                    onTurnTo={this.handelTurnTo}\n                    onChangeClients={this.handelChangeClient}\n                    onChangeGameState={state => {\n                        this.setState(() => ({gameState: state}));\n                    }}\n                    onTurnYou={this.handleTurnYou}\n                    onNotTurnYou={() => {\n                        this.clearTimeoutTimer();\n                        this.handleCloseTurnTimeoutDialog();\n                    }}\n                    onChangeConnected={connected => {\n                        this.setState(() => ({connected}));\n                    }}\n                    onChangeThinkTimeOut={timeout => {\n                        this.setState(() => ({thinkTimeOut: timeout}));\n                    }}\n                    onChangeDelayTimeOut={timeout => {\n                        this.setState(() => ({delayTimeOut: timeout}));\n                    }} onError={(e) => {__showSnackbar(e.message, e.stack || '');}}\n                    onChangeEpic={epic => {\n                        this.setState(() => ({epic}));\n                    }}\n                    onEmptyClientInEpic={() => {\n                        this.handleOpenNextEpicDialog();\n                    }} />\n                <audio id=\"player\" src=\"#\" ref={this.audioComponent}/>\n                <SettingDialog open={this.state.settingDialog} onClose={() => {\n                    this.setState(() => ({settingDialog: false}))\n                }} onSave={() => {\n                    if(this.wsProxy.current) {\n                        this.wsProxy.current.changeTimeout({\n                            thinkTimeOut: this.state.thinkTimeOut,\n                            delayTimeOut: this.state.delayTimeOut,\n                        });\n                    }\n                }}>\n                    <TextField\n                        id=\"setting-think-timeout\"\n                        fullWidth\n                        label=\"思考時間\"\n                        value={this.state.thinkTimeOut}\n                        defaultValue={this.state.thinkTimeOut}\n                        className={classes.textField}\n                        helperText={__convertVisibleMS(this.state.thinkTimeOut)}\n                        margin=\"normal\"\n                        onChange={event => {\n                            const value = event.target.value;\n                            this.setState(() => ({thinkTimeOut: +value}));\n                        }}\n                    />\n                    <TextField\n                        id=\"setting-delay-timeout\"\n                        fullWidth\n                        label=\"延時時間\"\n                        value={this.state.delayTimeOut}\n                        defaultValue={this.state.delayTimeOut}\n                        className={classes.textField}\n                        helperText={__convertVisibleMS(this.state.delayTimeOut)}\n                        margin=\"normal\"\n                        onChange={event => {\n                            const value = event.target.value;\n                            this.setState(() => ({delayTimeOut: +value}));\n                        }}\n                    />\n                    <TextField\n                        fullWidth\n                        label=\"「換你」語音樣版\"\n                        value={this.state.turnMeSpeechText}\n                        defaultValue={this.state.turnMeSpeechText}\n                        className={classes.textField}\n                        helperText={'${name}: 名稱'}\n                        margin=\"normal\"\n                        onChange={event => {\n                            const value = event.target.value;\n                            this.setState(() => ({turnMeSpeechText: value}));\n                        }}\n                    />\n                    <TextField\n                        fullWidth\n                        label=\"「到時」語音樣版\"\n                        value={this.state.timeoutSpeechText}\n                        defaultValue={this.state.timeoutSpeechText}\n                        className={classes.textField}\n                        helperText={'${name}: 名稱'}\n                        margin=\"normal\"\n                        onChange={event => {\n                            const value = event.target.value;\n                            this.setState(() => ({timeoutSpeechText: value}));\n                        }}\n                    />\n                    <TextField\n                        fullWidth\n                        label=\"「延時」語音樣版\"\n                        value={this.state.delayTurnMeSpeechText}\n                        defaultValue={this.state.delayTurnMeSpeechText}\n                        className={classes.textField}\n                        helperText={'${name}: 名稱'}\n                        margin=\"normal\"\n                        onChange={event => {\n                            const value = event.target.value;\n                            this.setState(() => ({delayTurnMeSpeechText: value}));\n                        }}\n                    />\n                </SettingDialog>\n                <TimeoutFullScreen title={'換你:' + ms(this.state.timeRemain)} open={this.state.turnTimeoutDialog} onClose={this.handleCloseTurnTimeoutDialog}>\n                    <Button className={classes.bigButton} variant=\"contained\" onClick={() => {\n                        this.clearTimeoutTimer();\n                        this.handleDelayTurnYou();\n                    }}>\n                        再一下\n                    </Button>\n                    <Button className={classes.bigButton} variant=\"contained\" color=\"primary\" onClick={() => {\n                        this.clearTimeoutTimer();\n                        if(this.wsProxy.current) {\n                            this.wsProxy.current.next();\n                        }\n                        this.handleCloseTurnTimeoutDialog();\n                    }}>\n                        下一位\n                    </Button>\n                    <Button className={classes.bigButton} variant=\"contained\" color=\"secondary\" onClick={() => {\n                        this.clearTimeoutTimer();\n                        if(this.wsProxy.current) {\n                            this.wsProxy.current.nextClientEpic(this.state.clientId, 1);\n                            this.wsProxy.current.next();\n                        }\n                        this.handleCloseTurnTimeoutDialog();\n                    }}>\n                        進入下回合並下一位\n                    </Button>\n                </TimeoutFullScreen>\n                <TimeoutFullScreen title={'下一回合'} open={this.state.nextEpicDialog} onClose={this.handleCloseNextEpicDialog}>\n                    <Button className={classes.bigButton} variant=\"contained\" color=\"primary\" onClick={() => {\n                        this.wsProxy.current && this.wsProxy.current.deltaEpic(1);\n                        this.wsProxy.current && this.wsProxy.current.next();\n                        this.handleCloseNextEpicDialog();\n                    }}>\n                        開始下回合\n                    </Button>\n\n                </TimeoutFullScreen>\n            </div>\n        );\n    }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}